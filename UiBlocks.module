<?php namespace ProcessWire;

class UiBlocks extends WireData implements Module
{
	public $headScripts = array();
	public $footScripts = array();
	public $styles = array();
	public $ajaxRequestUrl; // The requested url, without the ajax or ui get parameters (for ajax calls)
	public $currentUiPath = []; // Stores the path to the UI block that is currently executing
	public $checkPath = true; // We switch this off once we hit the target UI so that the ajax method we hit can still render additional sub-blocks
	public $proCache;
	public $aiom;

	public static function getModuleInfo()
	{
		return array(
			'title' => 'UI Blocks',
			'version' => 022,
			'summary' => 'A Hierarchical Model-View-Controller (HMVC) Framework for building modular, nestable graphical user interfaces in ProcessWire.',
			'singular' => true,
			'autoload' => true,
			'installs' => array(),
			'requires' => array(),
			'icon' => 'cubes',
		);
	}

	public function __construct() {}

	public function init() {
		if($this->modules->isInstalled('ProCache') && $this->modules->getConfig('ProCache', 'cacheOn')) {
			$this->proCache = $this->modules->get('ProCache');
		}
		if($this->modules->isInstalled('AllInOneMinify')) {
			$this->aiom = $this->modules->get("AllInOneMinify");
		}

		/**
		 * $input->shouldLoad($uiId)
		 *
		 * Use the following if statement around any code in your controllers that you do not want to execute if this is an ajax request and the given UI was not requested.
		 *
		 * if($input->shouldLoad('myBlockId')) {
		 * 		$block = new MyBlockUI();
		 * }
		 *
		 */
		$this->addHook('WireInput::shouldLoad', function($e) {
			$uiId = $e->arguments[0];
			$input = $e->object;

			if(!$input->ajax || !$this->checkPath) { // If not an ajax request or we don't need to check the path, return true
				$e->return = true;
			}
			elseif($this->uiRequestedAtCurrentDepth() && $this->uiRequestedAtCurrentDepth() === $uiId) { // UI matches the UI requested at the current depth
				$e->return = true;
			}
			else {
				$e->return = false;
			}
			$e->return = true;
		});

		// Autoload model classes from the /site/templates/model/ folder when called
		$this->wire('classLoader')->addNamespace('ProcessWire', wire('config')->paths->templates . "model/");

		require(dirname(__FILE__) . '/UI.php'); // Load UI base class

		// Autoload UI subclasses from the /site/templates/ui/ folder when called
		spl_autoload_register(function ($class) {
			if(substr($class, -2) === 'UI') { // Class must end with 'UI' for this autoloader to be relevant

				$nameParts = explode('\\', $class);
				$className = array_pop($nameParts); // Get the class name without the namespace

				$baseFolder = wire('config')->paths->templates . "ui";

				$dirLevels = '';
				$fileFound = false;

				while (!$fileFound) {
					$dirLevels .= '/*';
					$fileMatches = glob($baseFolder . $dirLevels . '/' . $className . '.php', GLOB_NOSORT);
					if (count($fileMatches)) {
						$fileFound = true;
						require($fileMatches[0]);
					} else { // If there are no items at this level at all, stop looking.
						if (!count(glob($baseFolder . $dirLevels . '/', GLOB_NOSORT))) break;
					}
				}
			}
		});
	}

	public function ready() {
		if($this->input->ajax) {
			$this->setAjaxRequestUrl();
		}
	}

	/**
	 * For ajax requests
	 * @return string|false ID of the UI Block that has been requested at the current depth/level, or false if no block was requested at this level
	 */
	public function uiRequestedAtCurrentDepth() {
		$depth = count($this->currentUiPath);
		$ajaxPath = explode('.', $this->input->ui);

		if(count($ajaxPath) < $depth) return false;

		return $ajaxPath[$depth - 1];
	}

	private function setAjaxRequestUrl() {
		// Strip out ajax and ui vars from query string
		$getArray = $_GET;
		unset($getArray['ui']);
		unset($getArray['ajax']);
		$queryString = http_build_query($getArray);

		$this->ajaxRequestUrl = "{$this->input->url}?$queryString";
	}

	/**
	 * @return Handy functions for outputting assets in your markup
	 */

	public function headScripts() {
		$out = '';
		foreach($this->headScripts as $file) {
			$out .= "<script src=\"$file\"></script> \r\n";
		}
		return $out;
	}

	public function footScripts() {
		$out = '';
		foreach($this->footScripts as $file) {
			$out .= "<script src=\"$file\"></script> \r\n";
		}
		return $out;
	}

	public function styles() {
		$out = '';
		foreach($this->styles as $file) {
			$out .= "<link rel=\"stylesheet\" href=\"$file\" /> \r\n";
		}
		return $out;
	}

	public function install() {}

	public function uninstall() {}

}